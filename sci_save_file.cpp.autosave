#include "sci_save_file.h"

#include <string.h>
namespace scisl {

sci_save_file::sci_save_file(){
    _max_unit = 0;
}

sci_save_item* sci_save_file::new_save_item(){
    _item_buffer[_max_unit] = sci_save_item(this);
    _max_unit++;
    return &_item_buffer[_max_unit];
}

bool sci_save_file::save_all(){
    for(std::map<int,sci_save_item>::iterator iter = _item_buffer.begin() ; iter!=_item_buffer.end() ; iter++){
        iter->second.save();
    }
    return true;
}

sci_save_item* sci_save_file::load_first(){
    sci_save_item* item = new_save_item();
    item->load();
    return item;
}


int sci_save_file::max_unit(){
    return _max_unit;
}

void sci_save_file::unit_increase(){
    _max_unit++;
}


//---------------------------------------------------------------
sci_save_item::sci_save_item(sci_save_file* parent){
    _unit_index = parent->max_unit();
    this->_parent = parent;
}

sci_save_item& sci_save_item::operator<<(char* data){
    int i=_buffer.size()%_DATA_UNIT_SIZE;
    int j= strlen(data);
    while(i+j+1>_DATA_UNIT_VALID_SIZE){
        _buffer.insert(_buffer.size(),data,_DATA_UNIT_VALID_SIZE-i);
        char tmp[5];tmp[4]='\0';
        int_2_str(this->_parent->max_unit(),tmp);
        _buffer.insert(_buffer.size(),tmp,4);
        this->_parent->unit_increase();//增加了一单元
        j-=_DATA_UNIT_VALID_SIZE;
        data+=_DATA_UNIT_VALID_SIZE;
    }
    
    _buffer+=data;
    _buffer+="$";
    
}

sci_save_item& sci_save_item::operator<<(sci_save_item* data){
    char tmp[5];
    int_2_str(data->_unit_index,tmp);
    tmp[4] = '\0';
    
    int i=_buffer.size()%_DATA_UNIT_SIZE;
    if(i+5>_DATA_UNIT_VALID_SIZE){
        _buffer.insert(_buffer.size(),tmp,_DATA_UNIT_VALID_SIZE-i);
        char tmp[5];tmp[4]='\0';
        int_2_str(this->_parent->max_unit(),tmp);
        _buffer.insert(_buffer.size(),tmp,4);
        this->_parent->unit_increase();//增加了一单元
        j-=_DATA_UNIT_VALID_SIZE;
        data+=_DATA_UNIT_VALID_SIZE;
    }
    
    _buffer.insert(_buffer.size(),tmp,4);
    _buffer+= "$";
}

void sci_save_item::operator>>(std::string& dest){
    int i = _buffer.find_first_of("$");
    dest = _buffer.substr(0,i);
    _buffer = _buffer.substr(i+1);
}

void sci_save_item::operator>>(sci_save_item*& dest){
    char tmp[5];
    str_2_int(tmp,);
    tmp[4] = '\0';
    _buffer+= tmp;
    _buffer+= "$";
}

void sci_save_item::clear();

void sci_save_item::save();

void sci_save_item::load();
bool sci_save_item::should_save(){
    return true;
}

}















void int_2_str(unsigned int i,char* c){
    for(int j=0; j<4; j++){
        c[j]=(char)(0xff&i);
        i>>=8;
    }
}

unsigned int str_2_int(char* c){
    unsigned int i = 0;
    for(int j=3; j>=0; j--){
        i<<=8;
        i+= c[j]>=0?c[j]:(0xff+1+c[j]);
    }
    return i;
}